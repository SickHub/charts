nameOverride: ""
fullnameOverride: ""

# will create a kubernetes.io/dockerconfigjson secret
# and add it to imagePullSecrets of the serviceAccount
# i.e.
# AUTH=$( echo -n "$REGISTRY_USER:$REGISTRY_PASS" | base64 )
# DOCKER_CONFIG_JSON=$(echo -n '{ "auths": { "${REGISTRY_URL}": { "auth": "${AUTH}" } } }' | base64 | tr -d \"\n\")
dockerConfigJson:

imagePullSecrets: []

autoscaling:
  # autoscaling/v1, autoscaling/v2beta, autoscaling/v2
  apiVersionOverride: ""

nginx:
  replicaCount: 1
  shutdownDelay: 10
  strategy: {}
  # rollingUpdate:
  #     maxUnavailable: 0
  #     maxSurge: 3
  image:
    registry:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: "latest"

  # you should not need to change this
  docRoot: /var/www/html

  # lines to put in `htpasswd` file
  # currently protects `/` and `*.php`
  htaccess: []

  service:
    type: ClusterIP
    port: 80

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
    behaviour: {}
    # scaleDown:
    #  stabilizationWindowSeconds: 300
    #  policies:
    #   - type: Pods
    #     value: 1
    #     periodSeconds: 180
    # scaleUp:
    #   stabilizationWindowSeconds: 300
    #   policies:
    #   - type: Pods
    #     value: 2
    #     periodSeconds: 60
    ## requires custom.metrics.k8s.io
    # requestsPerSecond:
    #   value: 5
    #   name: requests-per-second
    # packetsPerSecond:
    #   averageValue: 30
    #   name: packets-per-second
  livenessProbe:
    path: /livez.html
  readinessProbe:
    path: /healthz.php

phpfpm:
  replicaCount: 1
  shutdownDelay: 20
  strategy: {}
    # rollingUpdate:
    #     maxUnavailable: 0
    #     maxSurge: 3
  image:
    registry:
    repository: php
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  # this should match the workdir of the image
  # only used when `persistence.enabled = true`
  docRoot: /var/www/html

  # serve static files of phpfpm image from nginx
  # these directories or files are copied to `docRoot` of nginx from the phpfpm image
  # mutually exclusive with `persistence.enabled = true`
  staticFiles: []
  #  - "livez.html"
  #  - "*.jpg"
  #  - "assets"

  extraEnv: []

  service:
    type: ClusterIP
    port: 9000

  resources: {}

  autoscaling:
    enabled: false

# if provided, these scripts will be mounted in both
# the nginx and phpfpm container with the given path
configMaps:
  scripts:
    path: /
    data:
      livez.html: |
        <html><body>OK</body></html>
      healthz.php: |
        <?php phpinfo(); ?>
#  configs:
#    path: /etc
#    data:
#      config.ini: |
#        [global]
#        mysetting = value


# Enable persistence using Persistent Volume Claims
# ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
#
persistence:
  enabled: false
  # existingClaim: # use this PVC, don't create one
  # existingVolume: # use this name for volume, instead of chart generated
  accessModes:
    - ReadWriteMany
  # size: 5Gi
  annotations: {}
  mountPath: /docRoot

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # imagePullSecrets: []

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

nodeSelector: {}

tolerations: []

affinity: {}
